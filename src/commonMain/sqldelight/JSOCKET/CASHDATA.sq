table_CashData:
CREATE TABLE IF NOT EXISTS CashData
(CASH_SUM INTEGER NOT NULL,
 RECORD_TABLE_ID TEXT NOT NULL,
 IDENTIFICATOR_1 TEXT,
 IDENTIFICATOR_2 TEXT,
 IDENTIFICATOR_3 TEXT,
 IDENTIFICATOR_4 TEXT,
 IDENTIFICATOR_5 TEXT,
 IDENTIFICATOR_6 TEXT,
 IDENTIFICATOR_7 TEXT,
 IDENTIFICATOR_8 TEXT,
 IDENTIFICATOR_9 TEXT,
 IDENTIFICATOR_10 TEXT,
 IDENTIFICATOR_11 TEXT,
 IDENTIFICATOR_12 TEXT,
 IDENTIFICATOR_13 TEXT,
 IDENTIFICATOR_14 TEXT,
 IDENTIFICATOR_15 TEXT,
 IDENTIFICATOR_16 TEXT,
 IDENTIFICATOR_17 TEXT,
 IDENTIFICATOR_18 TEXT,
 IDENTIFICATOR_19 TEXT,
 IDENTIFICATOR_20 TEXT,
 INTEGER_1 INTEGER,
 INTEGER_2 INTEGER,
 INTEGER_3 INTEGER,
 INTEGER_4 INTEGER,
 INTEGER_5 INTEGER,
 INTEGER_6 INTEGER,
 INTEGER_7 INTEGER,
 INTEGER_8 INTEGER,
 INTEGER_9 INTEGER,
 INTEGER_10 INTEGER,
 INTEGER_11 INTEGER,
 INTEGER_12 INTEGER,
 INTEGER_13 INTEGER,
 INTEGER_14 INTEGER,
 INTEGER_15 INTEGER,
 INTEGER_16 INTEGER,
 INTEGER_17 INTEGER,
 INTEGER_18 INTEGER,
 INTEGER_19 INTEGER,
 INTEGER_20 INTEGER NOT NULL DEFAULT 1,     -- NUMBER position
 LONG_1 INTEGER,
 LONG_2 INTEGER,
 LONG_3 INTEGER,
 LONG_4 INTEGER,
 LONG_5 INTEGER,
 LONG_6 INTEGER,
 LONG_7 INTEGER,
 LONG_8 INTEGER,
 LONG_9 INTEGER,
 LONG_10 INTEGER,
 LONG_11 INTEGER,
 LONG_12 INTEGER,
 LONG_13 INTEGER,
 LONG_14 INTEGER,
 LONG_15 INTEGER,
 LONG_16 INTEGER,
 LONG_17 INTEGER,
 LONG_18 INTEGER,
 LONG_19 INTEGER,
 LONG_20 INTEGER,   -- last select;
 STRING_1 TEXT,
 STRING_2 TEXT,
 STRING_3 TEXT,
 STRING_4 TEXT,
 STRING_5 TEXT,
 STRING_6 TEXT,
 STRING_7 TEXT,
 STRING_8 TEXT,
 STRING_9 TEXT,
 STRING_10 TEXT,
 STRING_11 TEXT,
 STRING_12 TEXT,
 STRING_13 TEXT,
 STRING_14 TEXT,
 STRING_15 TEXT,
 STRING_16 TEXT,
 STRING_17 TEXT,
 STRING_18 TEXT,
 STRING_19 TEXT,
 STRING_20 TEXT,
 BLOB_1 BLOB ,
 BLOB_2 BLOB ,
 BLOB_3 BLOB,
 INTEGER_20_LEVEL INTEGER NOT NULL DEFAULT 0, -- for sort NEW NUMBERS POSITION
 NEXT_RECORD_TABLE_ID TEXT NOT NULL DEFAULT "",  -- for sort NEW NUMBERS POSITION
 PRIMARY KEY (CASH_SUM, RECORD_TABLE_ID)
 );

 index_CashData_NumberPositionLastUpdate:
 CREATE INDEX IF NOT EXISTS CashData_NumberPositionLastUpdate ON CashData(CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC, RECORD_TABLE_ID);

 trigger_CashData_insert:
 CREATE TRIGGER IF NOT EXISTS TCashDataInsert
 AFTER INSERT ON CashData
 FOR EACH ROW
 WHEN EXISTS (SELECT RECORD_TABLE_ID
              FROM   CashData
              WHERE  CASH_SUM = new.CASH_SUM
              ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC
              LIMIT 1 OFFSET new.INTEGER_20 - 1)
 BEGIN
   WITH tab (record_id, integer_20, integer_20_level)
   AS (SELECT RECORD_TABLE_ID,
              INTEGER_20,
              INTEGER_20_LEVEL
       FROM   CashData
       WHERE  CASH_SUM = new.CASH_SUM
       ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC
       LIMIT 1 OFFSET new.INTEGER_20 - 1)

  UPDATE CashData
    SET    NEXT_RECORD_TABLE_ID = (SELECT record_id FROM tab LIMIT 1),
           INTEGER_20 = (SELECT integer_20 FROM tab LIMIT 1),
           INTEGER_20_LEVEL = (SELECT integer_20_level FROM tab LIMIT 1)
    WHERE  CASH_SUM = new.CASH_SUM
    AND    RECORD_TABLE_ID = new.RECORD_TABLE_ID;

  UPDATE CashData
      SET    INTEGER_20_LEVEL = INTEGER_20_LEVEL + 1
      WHERE  CASH_SUM = new.CASH_SUM
      AND    RECORD_TABLE_ID = (SELECT NEXT_RECORD_TABLE_ID
                                FROM   CashData
                                WHERE  CASH_SUM = new.CASH_SUM
                                AND    RECORD_TABLE_ID = new.RECORD_TABLE_ID);

 END;

 trigger_CashData_update:
  CREATE TRIGGER IF NOT EXISTS TCashDataUpdate
  AFTER UPDATE ON CashData
  FOR EACH ROW
  WHEN old.LONG_20 <> new.LONG_20
  AND old.INTEGER_20 <> new.INTEGER_20
  AND EXISTS (SELECT RECORD_TABLE_ID
              FROM   CashData
              WHERE  CASH_SUM = new.CASH_SUM
              ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC
              LIMIT 1 OFFSET new.INTEGER_20 - 1)
   AND new.RECORD_TABLE_ID <> (SELECT RECORD_TABLE_ID
                               FROM   CashData
                               WHERE  CASH_SUM = new.CASH_SUM
                               ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC
                               LIMIT 1 OFFSET new.INTEGER_20 - 1)
   BEGIN
     WITH tab (record_id, integer_20, integer_20_level)
     AS (SELECT RECORD_TABLE_ID,
                INTEGER_20,
                INTEGER_20_LEVEL
         FROM   CashData
         WHERE  CASH_SUM = new.CASH_SUM
         ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC
         LIMIT 1 OFFSET new.INTEGER_20 - 1)

    UPDATE CashData
      SET    NEXT_RECORD_TABLE_ID = (SELECT record_id FROM tab LIMIT 1),
             INTEGER_20 = (SELECT integer_20 FROM tab LIMIT 1),
             INTEGER_20_LEVEL = (SELECT integer_20_level FROM tab LIMIT 1)
      WHERE  CASH_SUM = new.CASH_SUM
      AND    RECORD_TABLE_ID = new.RECORD_TABLE_ID;

    UPDATE CashData
        SET    INTEGER_20_LEVEL = INTEGER_20_LEVEL + 1
        WHERE  CASH_SUM = new.CASH_SUM
        AND    RECORD_TABLE_ID = (SELECT NEXT_RECORD_TABLE_ID
                                  FROM CashData
                                  WHERE  CASH_SUM = new.CASH_SUM
                                  AND    RECORD_TABLE_ID = new.RECORD_TABLE_ID);

   END;
       
insert_CashData:
INSERT OR REPLACE INTO CashData 
( CASH_SUM,
  RECORD_TABLE_ID,
  IDENTIFICATOR_1,
  IDENTIFICATOR_2,
  IDENTIFICATOR_3,
  IDENTIFICATOR_4,
  IDENTIFICATOR_5,
  IDENTIFICATOR_6,
  IDENTIFICATOR_7,
  IDENTIFICATOR_8,
  IDENTIFICATOR_9,
  IDENTIFICATOR_10,
  IDENTIFICATOR_11,
  IDENTIFICATOR_12,
  IDENTIFICATOR_13,
  IDENTIFICATOR_14,
  IDENTIFICATOR_15,
  IDENTIFICATOR_16,
  IDENTIFICATOR_17,
  IDENTIFICATOR_18,
  IDENTIFICATOR_19,
  IDENTIFICATOR_20,
  INTEGER_1,
  INTEGER_2,
  INTEGER_3,
  INTEGER_4,
  INTEGER_5,
  INTEGER_6,
  INTEGER_7,
  INTEGER_8,
  INTEGER_9,
  INTEGER_10,
  INTEGER_11,
  INTEGER_12,
  INTEGER_13,
  INTEGER_14,
  INTEGER_15,
  INTEGER_16,
  INTEGER_17,
  INTEGER_18,
  INTEGER_19,
  INTEGER_20,
  LONG_1,
  LONG_2,
  LONG_3,
  LONG_4,
  LONG_5,
  LONG_6,
  LONG_7,
  LONG_8,
  LONG_9,
  LONG_10,
  LONG_11,
  LONG_12,
  LONG_13,
  LONG_14,
  LONG_15,
  LONG_16,
  LONG_17,
  LONG_18,
  LONG_19,
  LONG_20,
  STRING_1,
  STRING_2,
  STRING_3,
  STRING_4,
  STRING_5,
  STRING_6,
  STRING_7,
  STRING_8,
  STRING_9,
  STRING_10,
  STRING_11,
  STRING_12,
  STRING_13,
  STRING_14,
  STRING_15,
  STRING_16,
  STRING_17,
  STRING_18,
  STRING_19,
  STRING_20,
  BLOB_1,
  BLOB_2,
  BLOB_3)
VALUES 
(?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ?,
 ?, ?, ?, ?, ? , ? , ? , ? , ?
 , ? , ? , ? , ? , ? , ? , ? , ?
 , ? , ? , ? , ? , ? , ? , ? , ? , ?
 , ? , ? , ? , ? , ? , ? , ? , ? , ?
 , ? , ? , ? );


 select_CashData_All:
  SELECT  *
  FROM CashData
  ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC;

 select_CashData_All_ON_CASH_SUM:
  SELECT  *
  FROM CashData
  WHERE CASH_SUM = ?
  ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC;

 clear_CashData:
  DELETE FROM CashData;

 update_CashData_SortNewNumbersPositions:
  WITH tab AS (SELECT
                 CASH_SUM AS cash_sum,
                 RECORD_TABLE_ID AS record_id,
                 row_number() OVER (
                      ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC
                 ) AS RowNum
                 FROM
                     CashData
                 WHERE CASH_SUM = ?
                 ORDER BY CASH_SUM, RECORD_TABLE_ID)

  UPDATE CashData
  SET   INTEGER_20 = (SELECT RowNum FROM tab WHERE CASH_SUM = cash_sum AND RECORD_TABLE_ID = record_id),
        INTEGER_20_LEVEL = 0,
        NEXT_RECORD_TABLE_ID = ""
        WHERE CASH_SUM = ?;


  select_CashData_All_ON_CASH_SUM:
    SELECT  *
    FROM CashData
    WHERE CASH_SUM = ?
    ORDER BY CASH_SUM, INTEGER_20 ASC, INTEGER_20_LEVEL ASC;
